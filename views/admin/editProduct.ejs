<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="/dist/output.css" rel="stylesheet">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;900&display=swap" rel="stylesheet">
  <!-- alphine js CDN -->
  <script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
  <!-- cropperjs -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropper/2.3.4/cropper.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/0.8.1/cropper.min.js"></script>

  <title>Product Management</title>
</head>

<body class="font-[Montserrat]">
  <!-- Main div -->
  <div class="flex flex-col h-screen  bg-gray-100">
    <!-- header -->
    <div class="bg-white h-20 text-white shadow w-full flex px-6 items-center justify-between">
      <div class="flex items-center">
        <div class="md:hidden flex items-center">
          <button id="menuBtn">
            <i class="fas fa-bars text-gray-500 text-lg"></i>
          </button>
        </div>
        <div class="flex  items-center">
          <img src="/images/offiq blacklogo.png" alt="Logo" class="md:w-28 md:translate-x-0 translate-x-[100%] w-24 h-18 mr-2 ">
        </div>

      </div>
      <div class="space-x-5">
        <button>
          <i class="fas fa-bell text-gray-500 text-lg"></i>
        </button>

        <button>
          <i class="fas fa-user text-gray-500 text-lg"></i>
        </button>
      </div>
    </div>

    <!-- body div -->
    <div class="flex-1 flex  ">

      <!-- navigation div -->
      <div class="p-2 bg-white absolute z-20 h-screen transition-all ease-linear duration-300 md:relative w-60 flex-col hidden md:flex" id="sideNav">
        <nav>
          <a class="block text-gray-500 py-2.5 px-4 my-4 rounded transition duration-200 hover:bg-gradient-to-r hover:from-cyan-400 hover:to-[#076AE1] hover:text-white" href="/admin">
            <i class="fas fa-home mr-2"></i>Dashboard
          </a>
          <a class="block text-gray-500 py-2.5 px-4 my-4 rounded transition duration-200 hover:bg-gradient-to-r hover:from-cyan-400 hover:to-[#076AE1] hover:text-white" href="/admin/userMangement">
            <i class="fas fa-users mr-2"></i>User Management
          </a>
          <a class="block text-gray-500 py-2.5 px-4 my-4 rounded transition duration-200 hover:bg-gradient-to-r hover:from-cyan-400 hover:to-[#076AE1] hover:text-white" href="/admin/categoryManagement">
            <i class="fa-solid fa-boxes-stacked mr-2"></i>Category Management
          </a>
          <a class="block py-2.5 px-4 my-4 rounded transition duration-200 bg-gradient-to-r from-cyan-400 to-[#076AE1] text-white" href="">

            <i class="fas fa-store mr-2"></i>Product Management
          </a>

          <a class="block text-gray-500 py-2.5 px-4 my-4 rounded transition duration-200 hover:bg-gradient-to-r hover:from-cyan-400 hover:to-[#076AE1] hover:text-white" href="/admin/orderManagement">
            <i class="fas fa-exchange-alt mr-2"></i>Order Management
          </a>
          <a class="block text-gray-500 py-2.5 px-4 my-4 rounded transition duration-200 hover:bg-gradient-to-r hover:from-cyan-400 hover:to-[#076AE1] hover:text-white" href="#">
            <i class="fas fa-file-alt mr-2"></i>Report
          </a>
          <a class="block text-gray-500 py-2.5 px-4 my-2 rounded transition duration-200 hover:bg-gradient-to-r hover:from-cyan-600 hover:to-[#076AE1] hover:text-white mt-auto" href="/admin/logout">
            <i class="fas fa-sign-out-alt mr-2"></i>Logout
          </a>
        </nav>



      </div>

      <!-- content div -->
      <div class="flex justify-center w-screen pr-5 pl-5 overflow-hidden">
        <div class="flex flex-col pt-10 w-full  sm:w-[50rem]">


          <div class="overflow-x-hidden  lg:mx-0.5">

            <!-- Title -->
            <span class="font-bold block text-2xl mb-3">
              Edit Product
            </span>
            <!-- Body -->
            <div>
              <form id="editProduct" class="mt-3" action="/admin/editProduct" method="POST" enctype="multipart/form-data">
                <input type="hidden" name="id" value="<%=product._id%>">
                <div>
                  <label class="block md:text-xs float-left text-gray-700">Product
                    Name</label>
                  <input type="text" name="name" placeholder="Enter Product Name" class="w-full px-4 py-3 rounded-lg placeholder:text-sm bg-gray-200 mt-1 border focus:border-blue-500 focus:bg-white focus:outline-none" autofocus="" value='<%=product.name%>' autocomplete="" required="">
                </div>
                <div>
                  <label class="block md:text-xs mt-4 float-left text-gray-700">Description</label>
                  <textarea name="description" id="description" placeholder="description of the product" class="w-full px-4 py-3 rounded-lg placeholder:text-sm bg-gray-200 mt-1 border focus:border-blue-500 focus:bg-white focus:outline-none" autofocus="" autocomplete="" required=""><%=product.description%></textarea>
                </div>
                <div>
                  <label class="block md:text-xs float-left text-gray-700">Price</label>
                  <input type="text" name="price" placeholder="product price" class="w-full px-4 py-3 rounded-lg placeholder:text-sm bg-gray-200 mt-1 border focus:border-blue-500 focus:bg-white focus:outline-none" autofocus="" autocomplete="" value='<%=product.price%>' required="">
                </div>
                <div>
                  <label class="block md:text-xs float-left text-gray-700">Quantity</label>
                  <input type="text" name="quantity" placeholder="product Quantity" class="w-full px-4 py-3 rounded-lg placeholder:text-sm bg-gray-200 mt-1 border focus:border-blue-500 focus:bg-white focus:outline-none" autofocus="" autocomplete="" value='<%=product.quantity%>' required="">
                </div>
                <div>
                  <label class="block md:text-xs float-left text-gray-700">Rating</label>
                  <input type="number" name="rating" placeholder="product rating" class="w-full px-4 py-3 rounded-lg placeholder:text-sm bg-gray-200 mt-1 border focus:border-blue-500 focus:bg-white focus:outline-none" autofocus="" autocomplete="" value='<%=product.rating%>' required="" min="1" max="5">

                </div>


                <div>
                  <label class="block md:text-xs float-left text-gray-700">Category</label>
                  <select name="category" id="category1" class="w-full px-4 py-3 rounded-lg placeholder:text-sm bg-gray-200 mt-1 border focus:border-blue-500 focus:bg-white focus:outline-none">
                    <option value="<%=product.category%>">Select Category</option>
                    <% category.forEach(category=> { %>
                    <option value="<%=category._id%>" <%if(product.category.equals(category._id)) {%>selected <% } %>>
                      <%=category.name%>
                    </option>
                    <% }); %>
                  </select>

                </div>
                <div>
                  <label class="block md:text-xs float-left text-gray-700">Subcategory</label>
                  <select name="subCategory" id="subcategory1" class="w-full px-4 py-3 rounded-lg placeholder:text-sm bg-gray-200 mt-1 border focus:border-blue-500 focus:bg-white focus:outline-none">
                    <!-- Subcategory options will be populated here dynamically -->
                    <option value="<%=product.subCategory%>" selected>
                      <%=category.name%>
                    </option>
                  </select>
                </div>

                <div>
                  <label class="block md:text-xs  float-left text-gray-700">Image</label>
                  <input class="w-full rounded-lg  placeholder:text-sm text-sm px-4 py-3 bg-gray-200 mt-1 border focus:border-blue-500 focus:bg-white focus:outline-none" id="file_input" name="productImage" type="file" multiple accept="image/*">

                  <div id="preview" class="flex flex-wrap gap-2">

                    <% product.images.forEach((image,i)=> { %>
                    <div>
                      <img src="<%= image %>" alt="product image" class="w-[100px] h-[100px]">
                      <button class="remove-image" data-image="<%=i%> " data-id="<%=product._id%>" type="button">Remove</button>
                    </div>
                    <% }); %>

                  </div>
                  <div id="croppedImageContainer" class="h-64 overflow-auto">

                  </div>
                  <div>
                    <button type="button" class="bg-blue-500 z-50 text-white rounded-xl px-4" id="save"></button>
                  </div>

                </div>
                <button type="submit" class="w-full block bg-indigo-500  z-50 hover:bg-indigo-400 focus:bg-indigo-400 text-white font-semibold rounded-lg
                                                                                                                                        px-4 py-3 mt-5">SAVE</button>
              </form>


            </div>
          </div>
        </div>



      </div>
    </div>


  </div>
  <!-- toast -->
  <div id="toast" class="fixed bottom-0 right-0 m-5 p-5 bg-black text-white rounded-lg shadow-lg hidden">
    <div id="progressBar" class="h-1.5 w-full bg-blue-gray-50 rounded-sm -translate-y-3 overflow-hidden  transition-all duration-15000 ease-linear">
      <div class="h-full bg-green-600" style="width: 0%;"></div>
    </div>
    <p id="toastMessage" class="mt-2">Error message</p>
  </div>
  </div>

  <!-- function for toast -->
  <script>
    function showToast(errorMessage) {
      // Get the toast, toastMessage, and progressBar elements
      const toast = document.getElementById('toast');
      const toastMessage = document.getElementById('toastMessage');
      const progressBar = document.getElementById('progressBar').firstElementChild;

      // Update the message and show the toast
      toastMessage.textContent = errorMessage;
      toast.classList.remove('hidden');

      // Update the width of the progress bar every 0.15 seconds for 5 seconds
      let width = 0;
      const intervalId = setInterval(() => {
        width += 1;
        progressBar.style.width = `${width}%`;

        // After 15 seconds, hide the toast and clear the interval
        if (width >= 100) {
          toast.classList.add('hidden');
          clearInterval(intervalId);
          // Reset the width of the progress bar for the next toast message
          progressBar.style.width = '0%';
        }
      }, 50); // 50 milliseconds * 100 iterations = 5 seconds
    }
  </script>

  <% if (err) { %>
  <script>
    let err = '<%= err %>';
    showToast(err);
  </script>
  <% } %>


  <!-- cropper js -->
  <script>
    // Get references to elements
    const fileInput = document.getElementById('file_input');
    const croppedImageContainer = document.getElementById('croppedImageContainer');

    // Initialize Cropper.js for multiple images
    let croppers = [];
    const selectedFiles = [];
    fileInput.addEventListener('change', (e) => {
      const files = e.target.files;

      // Loop through selected files
      for (let i = 0; i < files.length; i++) {
        const file = files[i];

        // Ensure the file is an image
        if (file.type.startsWith('image/')) {
          // Create a new FileReader to read the selected image
          const reader = new FileReader();

          reader.onload = (e) => {
            // Create an image element and set its source to the selected file
            const img = new Image();
            img.src = e.target.result;

            // Append the image to the container
            croppedImageContainer.appendChild(img);

            // Initialize Cropper.js on the image
            const cropper = new Cropper(img, {

              aspectRatio: 4 / 5, // Set the aspect ratio as needed
              viewMode: 1, // Set the view mode as needed

            });

            // Store the cropper instance in the croppers array
            croppers.push(cropper);
          };

          reader.readAsDataURL(file);
        }
      }
    });

    // Add a save button for the cropped images
    let saveButton = document.getElementById('save');
    saveButton.textContent = 'Save';
    saveButton.onclick = function() {
      // Loop through the croppers and save each cropped image
      croppers.forEach((cropper, index) => {
        let canvas = cropper.getCroppedCanvas();
        canvas.toBlob(function(blob) {
          // Create a new blob URL for the cropped image
          let croppedImageUrl = URL.createObjectURL(blob);
          let fileName = `cropped_${index}.jpeg`;

          const file = new File([blob], fileName, {
            type: 'image/jpeg'
          });
          selectedFiles.push(file)
          // Create a new FormData object and append the Blob
          let formData = new FormData();
          formData.append(`croppedImage_${index}`, file);

        }, 'image/jpeg');
      });
      const dataTransfer = new DataTransfer();
      selectedFiles.forEach(file => {
        dataTransfer.items.add(file);

      });
      fileInput.files = dataTransfer.files;
    };
  </script>

  <!-- delete existing image -->
  <script>
    // Get all the "remove" buttons
    const removeButtons = document.querySelectorAll('.remove-image');


    removeButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Get the image name from the data attribute
        const imageName = button.dataset.image;
        const pId = button.dataset.id;
        // Send a request to the server to remove the image
        fetch('/admin/removeImage', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              imageName,
              pId
            })
          })
          .then(response => {
            // Handle the response from the server
            if (response.ok) {
              // Image removed successfully

              window.location.reload()
            } else {
              // Error occurred while removing the image
              console.error('Error removing image');
            }
          })
          .catch(error => {
            // Handle any network or server errors
            console.error('Network or server error:', error);
          });
      });
    });
  </script>

  <!--ReLOADING  -->
  <script>
    let scrollPosition = [
      self.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft,
      self.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop
    ];

    window.onload = function() {
      window.scrollTo(scrollPosition[0], scrollPosition[1]);
    };
  </script>

  <script>
    // for fetching data based on the category
    const categorySelect = document.getElementById('category1');
    const subcategorySelect = document.getElementById('subcategory1');

    setupCategorySelection(categorySelect, subcategorySelect);

    document.addEventListener('DOMContentLoaded', async () => {
      const selectedCategoryId = categorySelect.value;
      const subcategories = await fetchSubcategories(selectedCategoryId);
      populateSubcategories(subcategories, subcategorySelect);
    });

    function setupCategorySelection(categorySelect, subcategorySelect) {
      categorySelect.addEventListener('change', async () => {
        const selectedCategoryId = categorySelect.value;
        const subcategories = await fetchSubcategories(selectedCategoryId);
        populateSubcategories(subcategories, subcategorySelect);
      });
    }

    function populateSubcategories(subcategories, subcategorySelect) {
      subcategorySelect.innerHTML = '';

      // const defaultOption = document.createElement('option');
      // defaultOption.value = '';
      // defaultOption.textContent = 'Select Subcategory';
      // subcategorySelect.appendChild(defaultOption);

      subcategories.forEach(subcategory => {
        const option = document.createElement('option');
        option.value = subcategory._id;
        option.textContent = subcategory.subName;
        if (subcategory._id == '<%=product.subCategory%>') {
          option.selected = true
        }
        subcategorySelect.appendChild(option);
      });
    }

    // Function to fetch subcategories based on the selected category
    async function fetchSubcategories(categoryId) {
      const response = await fetch(`/admin/getSubcategory/${categoryId}`);
      const data = await response.json();
      return data.subcategories;
    }
  </script>


  <script>
    const menuBtn = document.getElementById('menuBtn');
    const sideNav = document.getElementById('sideNav');
    menuBtn.addEventListener('click', () => {
      sideNav.classList.toggle('hidden');
    });
  </script>
  <script src="https://kit.fontawesome.com/2129bb9b13.js" crossorigin="anonymous"></script>
</body>

</html>